<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-4.2.xsd
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-4.2.xsd 
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
    http://www.springframework.org/schema/util 
    http://www.springframework.org/schema/util/spring-util-4.2.xsd">
	<!-- 读取jedis配置文件； 这里可以不用配置，-dao已经配置了扫描配置文件 -->
	<!-- <context:property-placeholder location="classpath:/properties/*.properties"/> -->
	<context:property-placeholder location="classpath:redis.properties"
		ignore-unresolvable="true" />
	<!-- 连接池配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 最大连接数 -->
		<property name="maxTotal" value="30" />
		<!-- 最大空闲连接数 -->
		<property name="maxIdle" value="10" />
		<!-- 每次释放连接的最大数目 -->
		<property name="numTestsPerEvictionRun" value="1024" />
		<!-- 释放连接的扫描间隔（毫秒） -->
		<property name="timeBetweenEvictionRunsMillis" value="30000" />
		<!-- 连接最小空闲时间 -->
		<property name="minEvictableIdleTimeMillis" value="1800000" />
		<!-- 连接空闲多久后释放, 当空闲时间>该值 且 空闲连接>最大空闲连接数 时直接释放 -->
		<property name="softMinEvictableIdleTimeMillis" value="10000" />
		<!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 -->
		<property name="maxWaitMillis" value="1500" />
		<!-- 在获取连接的时候检查有效性, 默认false -->
		<property name="testOnBorrow" value="true" />
		<!-- 在空闲时检查有效性, 默认false -->
		<property name="testWhileIdle" value="true" />
		<!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true -->
		<property name="blockWhenExhausted" value="false" />
	</bean>

	<!-- redis集群 -->
	<bean id="master1" class="org.springframework.data.redis.connection.RedisNode">
		<constructor-arg name="host" value="${redis.master.1.host}" />
		<constructor-arg name="port" value="${redis.master.1.port}" />
	</bean>
	<bean id="master2" class="org.springframework.data.redis.connection.RedisNode">
		<constructor-arg name="host" value="${redis.master.2.host}" />
		<constructor-arg name="port" value="${redis.master.2.port}" />
	</bean>
	<bean id="master3" class="org.springframework.data.redis.connection.RedisNode">
		<constructor-arg name="host" value="${redis.master.3.host}" />
		<constructor-arg name="port" value="${redis.master.3.port}" />
	</bean>
	<bean id="slave1" class="org.springframework.data.redis.connection.RedisNode">
		<constructor-arg name="host" value="${redis.slave.1.host}" />
		<constructor-arg name="port" value="${redis.slave.1.port}" />
	</bean>
	<bean id="slave2" class="org.springframework.data.redis.connection.RedisNode">
		<constructor-arg name="host" value="${redis.slave.2.host}" />
		<constructor-arg name="port" value="${redis.slave.2.port}" />
	</bean>
	<bean id="slave3" class="org.springframework.data.redis.connection.RedisNode">
		<constructor-arg name="host" value="${redis.slave.3.host}" />
		<constructor-arg name="port" value="${redis.slave.3.port}" />
	</bean>

	<bean id="redisClusterConfig"
		class="org.springframework.data.redis.connection.RedisClusterConfiguration">
		<property name="maxRedirects" value="3" />
		<property name="clusterNodes">
			<set>
				<ref bean="master1" />
				<ref bean="master2" />
				<ref bean="master3" />
				<ref bean="slave1" />
				<ref bean="slave2" />
				<ref bean="slave3" />
			</set>
		</property>
	</bean>

	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:use-pool="true">
		<constructor-arg name="poolConfig" ref="jedisPoolConfig" />
		<constructor-arg name="clusterConfig" ref="redisClusterConfig" />
	</bean>

	<bean id="stringRedisSerializer"
		class="org.springframework.data.redis.serializer.StringRedisSerializer" />

	<!-- redis template definition -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
<!-- 		<property name="keySerializer" ref="stringRedisSerializer" /> -->
<!-- 		<property name="hashKeySerializer" ref="stringRedisSerializer" /> -->
<!-- 		<property name="valueSerializer" ref="stringRedisSerializer" /> -->
<!-- 		<property name="hashValueSerializer" ref="stringRedisSerializer" /> -->
	</bean>



	<bean id="redisStringService" class="com.jo.demo.redis.RedisStringService">
		<property name="redisTemplate" ref="redisTemplate"></property>
	</bean>

	<bean id="redisListService" class="com.jo.demo.redis.RedisListService">
		<property name="redisTemplate" ref="redisTemplate"></property>
	</bean>


</beans>